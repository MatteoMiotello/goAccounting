// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Assets", testAssets)
	t.Run("TransactionCategories", testTransactionCategories)
	t.Run("Transactions", testTransactions)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Assets", testAssetsDelete)
	t.Run("TransactionCategories", testTransactionCategoriesDelete)
	t.Run("Transactions", testTransactionsDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Assets", testAssetsQueryDeleteAll)
	t.Run("TransactionCategories", testTransactionCategoriesQueryDeleteAll)
	t.Run("Transactions", testTransactionsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Assets", testAssetsSliceDeleteAll)
	t.Run("TransactionCategories", testTransactionCategoriesSliceDeleteAll)
	t.Run("Transactions", testTransactionsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Assets", testAssetsExists)
	t.Run("TransactionCategories", testTransactionCategoriesExists)
	t.Run("Transactions", testTransactionsExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Assets", testAssetsFind)
	t.Run("TransactionCategories", testTransactionCategoriesFind)
	t.Run("Transactions", testTransactionsFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Assets", testAssetsBind)
	t.Run("TransactionCategories", testTransactionCategoriesBind)
	t.Run("Transactions", testTransactionsBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Assets", testAssetsOne)
	t.Run("TransactionCategories", testTransactionCategoriesOne)
	t.Run("Transactions", testTransactionsOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Assets", testAssetsAll)
	t.Run("TransactionCategories", testTransactionCategoriesAll)
	t.Run("Transactions", testTransactionsAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Assets", testAssetsCount)
	t.Run("TransactionCategories", testTransactionCategoriesCount)
	t.Run("Transactions", testTransactionsCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Assets", testAssetsHooks)
	t.Run("TransactionCategories", testTransactionCategoriesHooks)
	t.Run("Transactions", testTransactionsHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Assets", testAssetsInsert)
	t.Run("Assets", testAssetsInsertWhitelist)
	t.Run("TransactionCategories", testTransactionCategoriesInsert)
	t.Run("TransactionCategories", testTransactionCategoriesInsertWhitelist)
	t.Run("Transactions", testTransactionsInsert)
	t.Run("Transactions", testTransactionsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("AssetToUserUsingUser", testAssetToOneUserUsingUser)
	t.Run("TransactionToAssetUsingAsset", testTransactionToOneAssetUsingAsset)
	t.Run("TransactionToTransactionCategoryUsingTransactionCategory", testTransactionToOneTransactionCategoryUsingTransactionCategory)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("AssetToTransactions", testAssetToManyTransactions)
	t.Run("TransactionCategoryToTransactions", testTransactionCategoryToManyTransactions)
	t.Run("UserToAssets", testUserToManyAssets)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("AssetToUserUsingAssets", testAssetToOneSetOpUserUsingUser)
	t.Run("TransactionToAssetUsingTransactions", testTransactionToOneSetOpAssetUsingAsset)
	t.Run("TransactionToTransactionCategoryUsingTransactions", testTransactionToOneSetOpTransactionCategoryUsingTransactionCategory)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("AssetToTransactions", testAssetToManyAddOpTransactions)
	t.Run("TransactionCategoryToTransactions", testTransactionCategoryToManyAddOpTransactions)
	t.Run("UserToAssets", testUserToManyAddOpAssets)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Assets", testAssetsReload)
	t.Run("TransactionCategories", testTransactionCategoriesReload)
	t.Run("Transactions", testTransactionsReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Assets", testAssetsReloadAll)
	t.Run("TransactionCategories", testTransactionCategoriesReloadAll)
	t.Run("Transactions", testTransactionsReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Assets", testAssetsSelect)
	t.Run("TransactionCategories", testTransactionCategoriesSelect)
	t.Run("Transactions", testTransactionsSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Assets", testAssetsUpdate)
	t.Run("TransactionCategories", testTransactionCategoriesUpdate)
	t.Run("Transactions", testTransactionsUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Assets", testAssetsSliceUpdateAll)
	t.Run("TransactionCategories", testTransactionCategoriesSliceUpdateAll)
	t.Run("Transactions", testTransactionsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
